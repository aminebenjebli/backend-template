name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create test env file
        run: echo "${{ secrets.TEST_ENV }}" > .env

      - name: Run tests
        run: npm run test

      - name: Run E2E tests
        run: npm run test:e2e

  build:
    name: Build and Lint
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Build application
        run: npm run build

  # deploy:
  #   name: Deploy to Production
  #   needs: [test, build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deploy to Server
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.PROD_HOST }}
  #         username: ${{ secrets.PROD_SSH_USERNAME }}
  #         key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
  #         script: |
  #           export REPO_DIR="/home/${{ secrets.PROD_SSH_USERNAME }}/${{ github.event.repository.name }}"
  #           if [ ! -d "$REPO_DIR" ]; then
  #             mkdir -p "$REPO_DIR"
  #             cd "$REPO_DIR"
  #             git clone -b main https://github.com/${{ github.repository }}.git .
  #           else
  #             cd "$REPO_DIR"
  #             git fetch origin main
  #             git checkout main
  #             git pull origin main
  #           fi
  #           docker compose up --build -d

